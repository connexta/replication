<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * Copyright (c) Connexta
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
-->
<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <reference id="persistentStore" interface="org.codice.ddf.persistence.PersistentStore"/>

    <bean id="replicationItemManager"
          class="org.codice.ditto.replication.api.impl.ReplicationItemManagerImpl">
        <argument ref="persistentStore"/>
    </bean>

    <bean id="replicationPersistentStore"
            class="org.codice.ditto.replication.api.impl.persistence.ReplicationPersistentStore">
        <argument ref="persistentStore"/>
    </bean>

    <bean id="siteManager" class="org.codice.ditto.replication.api.impl.persistence.SiteManagerImpl">
        <argument ref="replicationPersistentStore"/>
    </bean>

    <service ref="replicationItemManager" interface="org.codice.ditto.replication.api.persistence.ReplicationItemManager"/>
    <service ref="siteManager" interface="org.codice.ditto.replication.api.persistence.SiteManager"/>

    <bean id="configManager" class="org.codice.ditto.replication.api.impl.persistence.ReplicatorConfigManagerImpl">
        <argument ref="replicationPersistentStore"/>
    </bean>

    <service ref="configManager" interface="org.codice.ditto.replication.api.persistence.ReplicatorConfigManager"/>

    <bean id="historyManager" class="org.codice.ditto.replication.api.impl.persistence.ReplicatorHistoryManagerImpl">
        <argument ref="replicationPersistentStore"/>
    </bean>

    <service ref="historyManager" interface="org.codice.ditto.replication.api.persistence.ReplicatorHistoryManager"/>

    <reference-list id="nodeAdapterFactories" interface="org.codice.ditto.replication.api.NodeAdapterFactory" availability="optional"/>

    <bean id="nodeAdapters" class="org.codice.ditto.replication.api.impl.NodeAdapters">
        <property name="nodeAdapterFactories" ref="nodeAdapterFactories"/>
    </bean>

    <bean id="syncer" class="org.codice.ditto.replication.api.impl.Syncer">
        <argument ref="replicationItemManager"/>
        <argument ref="historyManager"/>
    </bean>

    <bean id="replicator" class="org.codice.ditto.replication.api.impl.ReplicatorImpl" init-method="init"
          destroy-method="cleanUp">
        <argument ref="nodeAdapters"/>
        <argument ref="historyManager"/>
        <argument ref="siteManager"/>
        <argument ref="replicatorImplExecutor"/>
        <argument ref="syncer"/>
    </bean>

    <service ref="replicator" interface="org.codice.ditto.replication.api.Replicator"/>

    <bean id="replicatorImplExecutor" class="java.util.concurrent.Executors"
          factory-method="newSingleThreadScheduledExecutor">
        <argument ref="replicatorImplThreadFactory"/>
    </bean>

    <bean id="replicatorImplThreadFactory"
          class="org.codice.ddf.platform.util.StandardThreadFactoryBuilder"
          factory-method="newThreadFactory">
        <argument value="replicatorImplProcessorThread"/>
    </bean>

    <bean id="replicatorRunnerFactory"
          class="org.codice.ddf.platform.util.StandardThreadFactoryBuilder"
          factory-method="newThreadFactory">
        <argument value="replicatorRunnerThread"/>
    </bean>

    <bean id="replicatorRunnerExecutor" class="java.util.concurrent.Executors"
          factory-method="newSingleThreadScheduledExecutor">
        <argument ref="replicatorRunnerFactory"/>
    </bean>

    <bean id="runner" class="org.codice.ditto.replication.api.impl.ReplicatorRunner" init-method="init" destroy-method="destroy">
        <argument ref="replicatorRunnerExecutor"/>
        <argument ref="replicator"/>
        <argument ref="configManager"/>
    </bean>
</blueprint>