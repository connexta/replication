#Base CircleCI template for Maven projects.
#Defined below are steps for building, unit tests, OWasp, Sonar, and release tag

version: 2.1
jobs:
  build:
    docker: &image
      - image: circleci/openjdk:11-jdk
    steps:
      - run: &env
          name: Setting environment
          command: |
              echo "export RELEASE=0" >> $BASH_ENV
              echo "export RELEASE_VERSION=NA" >> $BASH_ENV
              echo "export RELEASE_TAG=NA" >> $BASH_ENV
              echo "export NEXT_VERSION=NA" >> $BASH_ENV
              echo "export ION_GPG_KEYRING=$ION_RELEASE_KEY" >> $BASH_ENV
              echo "export DISABLE_DOWNLOAD_PROGRESS_OPTS=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" >> $BASH_ENV
              echo "export LINUX_MVN_RANDOM=-Djava.security.egd=file:/dev/./urandom" >> $BASH_ENV
              echo "export COVERAGE_EXCLUSIONS=**/test/**/*,**/itests/**/*,**/*Test*,**/sdk/**/*,**/*.js,**/node_modules/**/*,**/jaxb/**/*,**/wsdl/**/*,**/nces/sws/**/*,**/*.adoc,**/*.txt,**/*.xml" >> $BASH_ENV
              echo "export GITHUB_USERNAME=connexta" >> $BASH_ENV
              echo "export GITHUB_REPONAME=replication" >> $BASH_ENV
              echo "export GITHUB_KEY=$GITHUB_REPONAME-github-key" >> $BASH_ENV
              echo "export EXCLUDED_MODULES='-pl !distributions/docker/solr,!distributions/docker/replication,!distributions/test'" >> $BASH_ENV
              source $BASH_ENV
      - checkout
      - restore_cache: &restore_cache
          keys:
            - mvn-repo-v1-{{ .Branch }}-sonar
            - mvn-repo-v1-{{ .Branch }}-owasp
            - mvn-repo-v1-{{ .Branch }}
      - run:
          name: Building
          command: |
            if [ $CIRCLE_BRANCH = master ]
            then
              if [ $RELEASE = true ]
              then
                mvn -B -Dtag=$RELEASE_TAG -DreleaseVersion=$RELEASE_VERSION -DdevelopmentVersion=$NEXT_VERSION -Dgpg.secretKeyring=$ION_GPG_KEYRING -Dgpg.publicKeyring=$ION_GPG_KEYRING release:prepare
                echo "export RELEASE_CONFIG = `git rev-parse HEAD`" >> $BASH_ENV
              else
                mvn clean install javadoc:aggregate -B $DISABLE_DOWNLOAD_PROGRESS_OPTS $EXCLUDED_MODULES
              fi
            else
              mvn install -B -DskipTests $DISABLE_DOWNLOAD_PROGRESS_OPTS $EXCLUDED_MODULES
              mvn clean install javadoc:aggregate -B -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET $DISABLE_DOWNLOAD_PROGRESS_OPTS $EXCLUDED_MODULES
            fi
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - save_cache:
          key: mvn-repo-v1-{{ .Branch }}
          paths:
            - ~/.m2
  owasp:
    docker: *image
    steps:
      - run: *env
      - checkout
      - restore_cache: *restore_cache
      - run:
          name: Owasp Tests
          command: |
            if [ $CIRCLE_PR_NUMBER ]
            then
              mvn install -B -Powasp -DskipTests -Dgib.enabled=true -Dgib.referenceBranch=/refs/remotes/origin/$CHANGE_TARGET -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS $EXCLUDED_MODULES
            else
              mvn install -B -Powasp -DskipTests -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS $EXCLUDED_MODULES
            fi
            cp **/dependency-check-report.* /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts
      - save_cache:
          key: mvn-repo-v1-{{ .Branch }}-owasp
          paths:
            - ~/.m2
  sonar:
    docker: *image
    steps:
      - run: *env
      - checkout
      - restore_cache: *restore_cache
      - run:
          name: Sonar check
          command: |
            if [ $CIRCLE_BRANCH = master ]
            then
              if [ $RELEASE = true ]
              then
                git checkout $RELEASE_TAG
              fi
              mvn -q -B install sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$REP_SONAR_TOKEN  -Dsonar.organization=cx -Dsonar.projectKey=$GITHUB_REPONAME -Dsonar.exclusions=$COVERAGE_EXCLUSIONS $DISABLE_DOWNLOAD_PROGRESS_OPTS -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} -Dsonar.pullrequest.base=master $EXCLUDED_MODULES
            else
              mvn clean install sonar:sonar $EXCLUDED_MODULES \
              -Dsonar.projectKey=$CIRCLE_PROJECT_REPONAME \
              -Dsonar.organization=cx \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.pullrequest.key=$CIRCLE_PR_NUMBER \
              -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
              -Dsonar.pullrequest.base=master \
              -Dsonar.pullrequest.provider=github \
              -Dsonar.pullrequest.github.repository=connexta/$GITHUB_REPONAME \
              -Dsonar.pullrequest.github.endpoint=https://api.github.com \
              -Dsonar.exclusions='**/test/**/*' \
              -Dsonar.login=$REP_SONAR_TOKEN
            fi
      - save_cache:
          key: mvn-repo-v1-{{ .Branch }}-sonar
          paths:
            - ~/.m2
  release_tag:
    docker: *image
    steps:
      - run: *env
      - checkout
      - run:
          name: Release Tag
          command: |
            if [ $RELEASE = true ]
            then
              git checkout $RELEASE_COMMIT
              git remote add ssh-origin git@github.com:connexta/$CIRCLE_PROJECT_REPONAME.git
              echo ssh -i $GITHUB_KEY -l git -o StrictHostKeyChecking=no \\"\\$@\\" > run_ssh.sh
              chmod +x run_ssh.sh
              git push ssh-origin HEAD:$CIRCLE_BRANCH && git push ssh-origin $RELEASE_TAG
            fi
  deploy:
    docker: *image
    steps:
      - run: *env
      - checkout
      - restore_cache: *restore_cache
      - run:
          name: Deploy
          command: |
            if [ $CIRCLE_BRANCH = master ]
            then
              if [ $RELEASE = true ]
              then
                git checkout $RELEASE_TAG
              fi
              mvn javadoc:aggregate -B -DskipTests -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS
              if [ $RELEASE = true]
              then
                mvn deploy -B -DskipTests -DretryFailedDeploymentCount=10 -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS -Dgpg.secretKeyring=$ION_GPG_KEYRING -Dgpg.publicKeyring=$ION_GPG_KEYRING -Dgpg.passphraseServerId=\"ion-signing\"
              else
                mvn deploy -B -DskipTests -DretryFailedDeploymentCount=10 -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS
              fi
            fi
workflows:
  version: 2.1
  default:
    jobs:
      - build
      - owasp:
          requires:
            - build
      - sonar:
          requires:
            - owasp
      - release_tag:
          requires:
            - sonar
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - release_tag
          filters:
            branches:
              only: master